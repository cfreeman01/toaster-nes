use super::*;

#[test]
fn assemble_test() {
    assert_eq!(assemble(TEST_PROGRAM_SRC).unwrap(), TEST_PROGRAM_BYTES);
}

#[rustfmt::skip]
#[test]
fn disassemble_test() {
    assert_eq!(disassemble(&TEST_PROGRAM_BYTES.to_vec()).unwrap(), TEST_PROGRAM_SRC);
}

const TEST_PROGRAM_SRC: &str = &"ADC $12AB,X
ADC $34CD,Y
ADC ($56,X)
ADC ($78),Y
AND #$9A
AND $BC
AND $DE,X
AND $12AB
AND $34CD,X
AND $56EF,Y
AND ($78,X)
AND ($9A),Y
ASL A
ASL $BC
ASL $DE,X
ASL $12AB
ASL $34CD,X
BCC $EF
BCS $10
BEQ $20
BIT $30
BIT $40AB
BMI $50
BNE $60
BPL $70
BRK
BVC $80
BVS $90
CLC
CLD
CLI
CLV
CMP #$A0
CMP $B0
CMP $C0,X
CMP $12AB
CMP $34CD,X
CMP $56EF,Y
CMP ($78,X)
CMP ($9A),Y
CPX #$D0
CPX $E0
CPX $1234
CPY #$F0
CPY $01
CPY $2345
DEC $67
DEC $89,X
DEC $01AB
DEC $23CD,X
DEX
DEY
EOR #$45
EOR $67
EOR $89,X
EOR $ABCD
EOR $EF12,X
EOR $3456,Y
EOR ($78,X)
EOR ($9A),Y
INC $BC
INC $DE,X
INC $12EF
INC $34AB,X
INX
INY
JMP $56CD
JMP ($78EF)
JSR $90AB
LDA #$10
LDA $20
LDA $30,X
LDA $40CD
LDA $50EF,X
LDA $60AB,Y
LDA ($70,X)
LDA ($80),Y
LDX #$91
LDX $A1
LDX $B1,Y
LDX $C1EF
LDX $D1AB,Y
LDY #$E1
LDY $F1
LDY $12,X
LDY $34CD
LDY $56EF,X
LSR A
LSR $78
LSR $9A,X
LSR $BCDE
LSR $F012,X
NOP
ORA #$34
ORA $56
ORA $78,X
ORA $9ABC
ORA $DEF0,X
ORA $1234,Y
ORA ($56,X)
ORA ($78),Y
PHA
PHP
PLA
PLP
ROL A
ROL $90
ROL $AB,X
ROL $CDEF
ROL $3456,X
ROR A
ROR $78
ROR $9A,X
ROR $BCDE
ROR $F012,X
RTI
RTS
SBC #$56
SBC $78
SBC $9A,X
SBC $BCDE
SBC $F012,X
SBC $3456,Y
SBC ($78,X)
SBC ($9A),Y
SEC
SED
SEI
STA $90
STA $AB,X
STA $CDEF
STA $3456,X
STA $789A,Y
STA ($BC,X)
STA ($DE),Y
STX $12
STX $34,Y
STX $56EF
STY $78
STY $9A,X
STY $BCDE
TAX
TAY
TSX
TXA
TXS
TYA";

const TEST_PROGRAM_BYTES: [u8; 312] = [
    0x7D, 0xAB, 0x12, // ADC $12AB,X
    0x79, 0xCD, 0x34, // ADC $34CD,Y
    0x61, 0x56, // ADC ($56,X)
    0x71, 0x78, // ADC ($78),Y
    0x29, 0x9A, // AND #$9A
    0x25, 0xBC, // AND $BC
    0x35, 0xDE, // AND $DE,X
    0x2D, 0xAB, 0x12, // AND $12AB
    0x3D, 0xCD, 0x34, // AND $34CD,X
    0x39, 0xEF, 0x56, // AND $56EF,Y
    0x21, 0x78, // AND ($78,X)
    0x31, 0x9A, // AND ($9A),Y
    0x0A, // ASL A
    0x06, 0xBC, // ASL $BC
    0x16, 0xDE, // ASL $DE,X
    0x0E, 0xAB, 0x12, // ASL $12AB
    0x1E, 0xCD, 0x34, // ASL $34CD,X
    0x90, 0xEF, // BCC $EF
    0xB0, 0x10, // BCS $10
    0xF0, 0x20, // BEQ $20
    0x24, 0x30, // BIT $30
    0x2C, 0xAB, 0x40, // BIT $40AB
    0x30, 0x50, // BMI $50
    0xD0, 0x60, // BNE $60
    0x10, 0x70, // BPL $70
    0x00, // BRK
    0x50, 0x80, // BVC $80
    0x70, 0x90, // BVS $90
    0x18, // CLC
    0xD8, // CLD
    0x58, // CLI
    0xB8, // CLV
    0xC9, 0xA0, // CMP #$A0
    0xC5, 0xB0, // CMP $B0
    0xD5, 0xC0, // CMP $C0,X
    0xCD, 0xAB, 0x12, // CMP $12AB
    0xDD, 0xCD, 0x34, // CMP $34CD,X
    0xD9, 0xEF, 0x56, // CMP $56EF,Y
    0xC1, 0x78, // CMP ($78,X)
    0xD1, 0x9A, // CMP ($9A),Y
    0xE0, 0xD0, // CPX #$D0
    0xE4, 0xE0, // CPX $E0
    0xEC, 0x34, 0x12, // CPX $1234
    0xC0, 0xF0, // CPY #$F0
    0xC4, 0x01, // CPY $01
    0xCC, 0x45, 0x23, // CPY $2345
    0xC6, 0x67, // DEC $67
    0xD6, 0x89, // DEC $89,X
    0xCE, 0xAB, 0x01, // DEC $01AB
    0xDE, 0xCD, 0x23, // DEC $23CD,X
    0xCA, // DEX
    0x88, // DEY
    0x49, 0x45, // EOR #$45
    0x45, 0x67, // EOR $67
    0x55, 0x89, // EOR $89,X
    0x4D, 0xCD, 0xAB, // EOR $ABCD
    0x5D, 0x12, 0xEF, // EOR $EF12,X
    0x59, 0x56, 0x34, // EOR $3456,Y
    0x41, 0x78, // EOR ($78,X)
    0x51, 0x9A, // EOR ($9A),Y
    0xE6, 0xBC, // INC $BC
    0xF6, 0xDE, // INC $DE,X
    0xEE, 0xEF, 0x12, // INC $12EF
    0xFE, 0xAB, 0x34, // INC $34AB,X
    0xE8, // INX
    0xC8, // INY
    0x4C, 0xCD, 0x56, // JMP $56CD
    0x6C, 0xEF, 0x78, // JMP ($78EF)
    0x20, 0xAB, 0x90, // JSR $90AB
    0xA9, 0x10, // LDA #$10
    0xA5, 0x20, // LDA $20
    0xB5, 0x30, // LDA $30,X
    0xAD, 0xCD, 0x40, // LDA $40CD
    0xBD, 0xEF, 0x50, // LDA $50EF,X
    0xB9, 0xAB, 0x60, // LDA $60AB,Y
    0xA1, 0x70, // LDA ($70,X)
    0xB1, 0x80, // LDA ($80),Y
    0xA2, 0x91, // LDX #$91
    0xA6, 0xA1, // LDX $A1
    0xB6, 0xB1, // LDX $B1,Y
    0xAE, 0xEF, 0xC1, // LDX $C1EF
    0xBE, 0xAB, 0xD1, // LDX $D1AB,Y
    0xA0, 0xE1, // LDY #$E1
    0xA4, 0xF1, // LDY $F1
    0xB4, 0x12, // LDY $12,X
    0xAC, 0xCD, 0x34, // LDY $34CD
    0xBC, 0xEF, 0x56, // LDY $56EF,X
    0x4A, // LSR A
    0x46, 0x78, // LSR $78
    0x56, 0x9A, // LSR $9A,X
    0x4E, 0xDE, 0xBC, // LSR $BCDE
    0x5E, 0x12, 0xF0, // LSR $F012,X
    0xEA, // NOP
    0x09, 0x34, // ORA #$34
    0x05, 0x56, // ORA $56
    0x15, 0x78, // ORA $78,X
    0x0D, 0xBC, 0x9A, // ORA $9ABC
    0x1D, 0xF0, 0xDE, // ORA $DEF0,X
    0x19, 0x34, 0x12, // ORA $1234,Y
    0x01, 0x56, // ORA ($56,X)
    0x11, 0x78, // ORA ($78),Y
    0x48, // PHA
    0x08, // PHP
    0x68, // PLA
    0x28, // PLP
    0x2A, // ROL A
    0x26, 0x90, // ROL $90
    0x36, 0xAB, // ROL $AB,X
    0x2E, 0xEF, 0xCD, // ROL $CDEF
    0x3E, 0x56, 0x34, // ROL $3456,X
    0x6A, // ROR A
    0x66, 0x78, // ROR $78
    0x76, 0x9A, // ROR $9A,X
    0x6E, 0xDE, 0xBC, // ROR $BCDE
    0x7E, 0x12, 0xF0, // ROR $F012,X
    0x40, // RTI
    0x60, // RTS
    0xE9, 0x56, // SBC #$56
    0xE5, 0x78, // SBC $78
    0xF5, 0x9A, // SBC $9A,X
    0xED, 0xDE, 0xBC, // SBC $BCDE
    0xFD, 0x12, 0xF0, // SBC $F012,X
    0xF9, 0x56, 0x34, // SBC $3456,Y
    0xE1, 0x78, // SBC ($78,X)
    0xF1, 0x9A, // SBC ($9A),Y
    0x38, // SEC
    0xF8, // SED
    0x78, // SEI
    0x85, 0x90, // STA $90
    0x95, 0xAB, // STA $AB,X
    0x8D, 0xEF, 0xCD, // STA $CDEF
    0x9D, 0x56, 0x34, // STA $3456,X
    0x99, 0x9A, 0x78, // STA $789A,Y
    0x81, 0xBC, // STA ($BC,X)
    0x91, 0xDE, // STA ($DE),Y
    0x86, 0x12, // STX $12
    0x96, 0x34, // STX $34,Y
    0x8E, 0xEF, 0x56, // STX $56EF
    0x84, 0x78, // STY $78
    0x94, 0x9A, // STY $9A,X
    0x8C, 0xDE, 0xBC, // STY $BCDE
    0xAA, // TAX
    0xA8, // TAY
    0xBA, // TSX
    0x8A, // TXA
    0x9A, // TXS
    0x98, // TYA
];
